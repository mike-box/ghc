ref    compiler/GHC/Core/Coercion/Axiom.hs:458:2:     Note [RoughMap and rm_empty]
ref    compiler/GHC/Core/Opt/OccurAnal.hs:851:15:     Note [Loop breaking]
ref    compiler/GHC/Core/Opt/SetLevels.hs:1598:30:     Note [Top level scope]
ref    compiler/GHC/Core/Opt/Simplify.hs:2618:13:     Note [Case binder next]
ref    compiler/GHC/Core/Opt/Simplify.hs:3239:0:     Note [Suppressing binder-swaps on linear case]
ref    compiler/GHC/Core/Opt/Simplify.hs:3767:8:     Note [Lambda-bound unfoldings]
ref    compiler/GHC/Core/Opt/Simplify.hs:4123:33:     Note [Do not eta-expand trivial expressions]
ref    compiler/GHC/Core/Opt/Simplify/Utils.hs:1225:37:     Note [Gentle mode]
ref    compiler/GHC/Core/Opt/Specialise.hs:1593:28:     Note [Arity decrease]
ref    compiler/GHC/Core/RoughMap.hs:183:35:     Note [RoughMatch and beta reduction]
ref    compiler/GHC/Core/Subst.hs:100:60:     Note [Apply once]
ref    compiler/GHC/Core/Subst.hs:111:16:     Note [Extending the TCvSubst]
ref    compiler/GHC/Core/TyCo/FVs.hs:289:7:     Note [Free variables of Coercions]
ref    compiler/GHC/Core/TyCo/Ppr.hs:71:23:     Note [IfaceType and pretty-printing]
ref    compiler/GHC/Core/TyCo/Rep.hs:1711:31:     Note [What prevents a constraint from floating]
ref    compiler/GHC/Core/TyCo/Subst.hs:784:15:     Note [Extending the TCvSubst]
ref    compiler/GHC/Core/TyCo/Subst.hs:1001:15:     Note [Extending the TCvSubst]
ref    compiler/GHC/Core/TyCon.hs:961:35:     Note [Promoted GADT data construtors]
ref    compiler/GHC/Core/TyCon.hs:2442:62:     Note [Sharing nullary TyCons]
ref    compiler/GHC/Core/Unfold.hs:1171:23:     Note [INLINE for small functions (3)]
ref    compiler/GHC/Core/Unfold.hs:1242:50:     Note [Unfold info lazy contexts]
ref    compiler/GHC/Core/Unfold/Make.hs:157:34:     Note [DFunUnfoldings]
ref    compiler/GHC/Core/Unify.hs:544:16:     Note [Unification result]
ref    compiler/GHC/Core/Unify.hs:1390:9:     Note [INLINE pragmas and (>>)]
ref    compiler/GHC/Core/Utils.hs:944:40:     Note [ _       -> [con1]
ref    compiler/GHC/CoreToStg.hs:460:15:     Note [Nullary unboxed tuple]
ref    compiler/GHC/Driver/Main.hs:1551:34:     Note [simpleTidyPgm - mkBootModDetailsTc]
ref    compiler/GHC/Driver/Session.hs:1949:36:     Note [GHC.Driver.Main . Safe Haskell Inference]
ref    compiler/GHC/Driver/Session.hs:3910:49:     Note [Eta-reduction in -O0]
ref    compiler/GHC/Hs/Extension.hs:140:5:     Note [Strict argument type constraints]
ref    compiler/GHC/HsToCore/Binds.hs:313:33:     Note [AbsBinds wrappers]
ref    compiler/GHC/HsToCore/Binds.hs:849:46:     Note [Free dictionaries]
ref    compiler/GHC/HsToCore/Binds.hs:883:36:     Note [Free tyvars in rule LHS]
ref    compiler/GHC/HsToCore/Binds.hs:884:35:     Note [Free dictionaries in rule LHS]
ref    compiler/GHC/HsToCore/Binds.hs:942:24:     Note [Free dictionaries]
ref    compiler/GHC/HsToCore/Binds.hs:999:34:     Note [Dead spec binders]
ref    compiler/GHC/HsToCore/Docs.hs:126:70:     Note [1]
ref    compiler/GHC/HsToCore/Docs.hs:130:0:     Note [1]
ref    compiler/GHC/HsToCore/Pmc/Solver.hs:853:20:     Note [COMPLETE sets on data families]
ref    compiler/GHC/HsToCore/Types.hs:61:13:     Note [Generating fresh names for FFI wrappers]
ref    compiler/GHC/HsToCore/Utils.hs:939:62:     Note [Don't CPR join points]
ref    compiler/GHC/Iface/Syntax.hs:705:0:     Note [Minimal complete definition]
ref    compiler/GHC/Iface/Syntax.hs:765:44:     Note [Minimal complete definition]
ref    compiler/GHC/Parser/Lexer.x:185:7:     Note [Lexing NumericUnderscores extension]
ref    compiler/GHC/Parser/Lexer.x:502:3:     Note [Lexing NumericUnderscores extension]
ref    compiler/GHC/Rename/Expr.hs:2013:9:     Note [ApplicativeDo and strict patterns]
ref    compiler/GHC/Rename/Expr.hs:2046:12:     Note [ApplicativeDo and refutable patterns]
ref    compiler/GHC/Rename/Expr.hs:2130:18:     Note [ApplicativeDo and strict patterns]
ref    compiler/GHC/Rename/Expr.hs:2148:0:     Note [ApplicativeDo and strict patterns]
ref    compiler/GHC/Rename/Expr.hs:2203:0:     Note [ApplicativeDo and refutable patterns]
ref    compiler/GHC/Rename/Pat.hs:888:29:     Note [Disambiguating record fields]
ref    compiler/GHC/Rename/Splice.hs:450:27:     Note [Splices]
ref    compiler/GHC/Runtime/Eval.hs:996:2:     Note [Querying instances for a type]
ref    compiler/GHC/Runtime/Interpreter.hs:198:30:     Note [uninterruptibleMask_]
ref    compiler/GHC/StgToCmm.hs:107:18:     Note [codegen-split-init]
ref    compiler/GHC/StgToCmm.hs:110:18:     Note [pipeline-split-init]
ref    compiler/GHC/StgToCmm/Expr.hs:491:4:     Note [case on bool]
ref    compiler/GHC/StgToCmm/Expr.hs:751:3:     Note [alg-alt heap check]
ref    compiler/GHC/Tc/Errors.hs:180:13:     Note [Fail fast on kind errors]
ref    compiler/GHC/Tc/Errors.hs:2016:0:     Note [Highlighting ambiguous type variables]
ref    compiler/GHC/Tc/Errors/Ppr.hs:1760:11:     Note [Highlighting ambiguous type variables]
ref    compiler/GHC/Tc/Gen/Arrow.hs:435:29:     Note [RecStmt]
ref    compiler/GHC/Tc/Gen/Bind.hs:1397:19:     Note [Existentials in pattern bindings]
ref    compiler/GHC/Tc/Gen/Export.hs:187:15:     Note [Modules without a module header]
ref    compiler/GHC/Tc/Gen/Export.hs:418:0:     Note [Modules without a module header]
ref    compiler/GHC/Tc/Gen/Export.hs:576:7:     Note [Typing Pattern Synonym Exports]
ref    compiler/GHC/Tc/Gen/Export.hs:615:16:     Note [Types of TyCon]
ref    compiler/GHC/Tc/Gen/Expr.hs:670:24:     Note [Disambiguating record fields]
ref    compiler/GHC/Tc/Gen/Expr.hs:687:15:     Note [Mixed Record Selectors]
ref    compiler/GHC/Tc/Gen/Expr.hs:1195:7:     Note [Disambiguating record fields]
ref    compiler/GHC/Tc/Gen/Expr.hs:1298:11:     Note [Deprecating ambiguous fields]
ref    compiler/GHC/Tc/Gen/Foreign.hs:149:26:     Note [Expanding newtypes]
ref    compiler/GHC/Tc/Gen/HsType.hs:552:56:     Note [Skolem escape prevention]
ref    compiler/GHC/Tc/Gen/HsType.hs:2623:7:     Note [Matching a kind sigature with a declaration]
ref    compiler/GHC/Tc/Gen/Match.hs:553:20:     Note [GroupStmt binder map]
ref    compiler/GHC/Tc/Gen/Match.hs:746:20:     Note [GroupStmt binder map]
ref    compiler/GHC/Tc/Gen/Match.hs:1011:0:     Note [typechecking ApplicativeStmt]
ref    compiler/GHC/Tc/Gen/Pat.hs:169:20:     Note [Typing patterns in pattern bindings]
ref    compiler/GHC/Tc/Gen/Pat.hs:476:7:     Note [Pattern coercions]
ref    compiler/GHC/Tc/Gen/Pat.hs:1077:7:     Note [Matching polytyped patterns]
ref    compiler/GHC/Tc/Gen/Pat.hs:1376:16:     Note [Pattern coercions]
ref    compiler/GHC/Tc/Gen/Sig.hs:78:10:     Note [Overview of type signatures]
ref    compiler/GHC/Tc/Instance/Family.hs:515:35:     Note [Constrained family instances]
ref    compiler/GHC/Tc/Module.hs:698:15:     Note [Extra dependencies from .hs-boot files]
ref    compiler/GHC/Tc/Module.hs:1901:19:     Note [Root-main id]
ref    compiler/GHC/Tc/Module.hs:1971:6:     Note [Root-main id]
ref    compiler/GHC/Tc/Solver.hs:2541:36:     Note [Kind generalisation and SigTvs]
ref    compiler/GHC/Tc/Solver/Canonical.hs:1228:33:     Note [Canonical LHS]
ref    compiler/GHC/Tc/Solver/Interact.hs:1638:9:     Note [No touchables as FunEq RHS]
ref    compiler/GHC/Tc/Solver/Interact.hs:2292:12:     Note [The equality class story]
ref    compiler/GHC/Tc/Solver/Rewrite.hs:1032:7:     Note [Stability of rewriting]
ref    compiler/GHC/Tc/TyCl.hs:627:3:     Note [Single function non-recursive binding special-case]
ref    compiler/GHC/Tc/TyCl.hs:1106:6:     Note [Unification variables need fresh Names]
ref    compiler/GHC/Tc/TyCl.hs:1895:13:     Note [TyConBinders for the result kind signatures of a data type]
ref    compiler/GHC/Tc/TyCl.hs:4366:16:     Note [rejigCon and c.f. Note [Check role annotations in a second pass]
ref    compiler/GHC/Tc/TyCl/Instance.hs:947:26:     Note [Generalising in tcFamTyPatsGuts]
ref    compiler/GHC/Tc/Types.hs:647:17:     Note [Generating fresh names for FFI wrappers]
ref    compiler/GHC/Tc/Types.hs:696:33:     Note [Extra dependencies from .hs-boot files]
ref    compiler/GHC/Tc/Types.hs:1145:28:     Note [Don't promote data constructors with non-equality contexts]
ref    compiler/GHC/Tc/Types.hs:1221:36:     Note [Bindings with closed types]
ref    compiler/GHC/Tc/Types.hs:1457:47:     Note [Care with plugin imports]
ref    compiler/GHC/Tc/Types/Constraint.hs:238:34:     Note [NonCanonical Semantics]
ref    compiler/GHC/Tc/Utils/Concrete.hs:246:2:     Note [Concrete and Concrete#]
ref    compiler/GHC/Tc/Utils/Env.hs:556:7:     Note [Bindings with closed types]
ref    compiler/GHC/Tc/Utils/Env.hs:1128:7:     Note [Generating fresh names for ccall wrapper]
ref    compiler/GHC/Tc/Utils/Env.hs:1141:0:     Note [Generating fresh names for FFI wrappers]
ref    compiler/GHC/Tc/Utils/Env.hs:1192:7:     Note [Placeholder PatSyn kinds]
ref    compiler/GHC/Tc/Utils/TcMType.hs:793:7:     Note [Kind checking for GADTs]
ref    compiler/GHC/Tc/Utils/TcType.hs:529:7:     Note [TyVars and TcTyVars]
ref    compiler/GHC/ThToHs.hs:1738:11:     Note [Adding parens for splices]
ref    compiler/GHC/ThToHs.hs:1749:3:     Note [Adding parens for splices]
ref    compiler/GHC/Types/Basic.hs:586:17:     Note [Safe Haskell isSafeOverlap]
ref    compiler/GHC/Types/Basic.hs:1326:7:     Note [Activation competition]
ref    compiler/GHC/Types/Demand.hs:307:25:     Note [Preserving Boxity of results is rarely a win]
ref    compiler/GHC/Types/Demand.hs:1100:4:     Note [Use one-shot information]
ref    compiler/GHC/Types/Error.hs:358:3:     Note [Suppressing Messages]
ref    compiler/GHC/Types/Error.hs:393:28:     Note [Suppressing Messages]
ref    compiler/GHC/Types/Name/Occurrence.hs:301:4:     Note [Unique OccNames from Template Haskell]
ref    compiler/GHC/Types/Unique.hs:78:25:     Note [Uniques-prelude - Uniques for wired-in Prelude things]
ref    compiler/GHC/Unit/Module/Deps.hs:79:13:     Note [Structure of dep_boot_mods]
ref    compiler/GHC/Utils/Monad.hs:391:34:     Note [multiShotIO]
ref    compiler/Language/Haskell/Syntax/Binds.hs:226:31:     Note [fun_id in Match]
ref    compiler/Language/Haskell/Syntax/Expr.hs:1561:32:     Note [Quasi-quote overview]
ref    compiler/Language/Haskell/Syntax/Pat.hs:336:12:     Note [Disambiguating record fields]
ref    configure.ac:212:10:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    docs/core-spec/core-spec.mng:177:6:     Note [TyBinders]
ref    ghc/GHCi/UI.hs:3630:25:     Note [ModBreaks.decls]
ref    ghc/ghc.mk:62:6:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    hadrian/src/Expression.hs:130:30:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    libraries/base/GHC/ST.hs:139:7:     Note [Definition of runRW#]
ref    testsuite/config/ghc:212:10:     Note [WayFlags]
ref    testsuite/driver/testlib.py:152:10:     Note [Why is there no stage1 setup function?]
ref    testsuite/driver/testlib.py:156:2:     Note [Why is there no stage1 setup function?]
ref    testsuite/mk/boilerplate.mk:259:2:     Note [WayFlags]
ref    testsuite/tests/indexed-types/should_fail/ExtraTcsUntch.hs:30:27:     Note [Extra TcS Untouchables]
ref    testsuite/tests/perf/join_points/join005.hs:19:63:     Note [Don't CPR join points]
ref    testsuite/tests/perf/should_run/all.T:3:6:     Note [Solving from instances when interacting Dicts]
ref    testsuite/tests/polykinds/CuskFam.hs:16:11:     Note [Unifying implicit CUSK variables]
ref    testsuite/tests/simplCore/should_compile/T5776.hs:16:7:     Note [Simplifying RULE lhs constraints]
ref    testsuite/tests/simplCore/should_compile/simpl018.hs:3:7:     Note [Float coercions]
ref    testsuite/tests/typecheck/should_compile/CbvOverlap.hs:5:26:     Note [Type variable cycles in Givens]
ref    testsuite/tests/typecheck/should_compile/Improvement.hs:10:12:     Note [No reduction for Derived class constraints]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs.hs:7:7:     Note [When does an implication have given equalities?]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs.hs:21:43:     Note [Type variable cycles in Givens]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs2.hs:4:6:     Note [When does an implication have given equalities?]
ref    testsuite/tests/typecheck/should_compile/T9117.hs:3:12:     Note [Order of Coercible Instances]
ref    testsuite/tests/typecheck/should_compile/tc200.hs:5:7:     Note [Multiple instantiation]
ref    testsuite/tests/typecheck/should_compile/tc228.hs:9:7:     Note [Inference and implication constraints]
ref    testsuite/tests/typecheck/should_compile/tc231.hs:12:16:     Note [Important subtlety in oclose]
ref    testsuite/tests/typecheck/should_fail/UnliftedNewtypesMultiFieldGadt.hs:11:28:     Note [Kind-checking the field type]
ref    testsuite/tests/typecheck/should_fail/tcfail093.hs:13:7:     Note [Important subtlety in oclose]
ref    utils/notes-util/Notes.hs:33:29:     Note [" <> T.unpack x <> "]
ref    utils/notes-util/Notes.hs:70:22:     Note [...]
ref    validate:413:14:     Note [Why is there no stage1 setup function?]

